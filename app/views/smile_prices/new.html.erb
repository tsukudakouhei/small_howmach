<div class="max-w-screen-2xl px-4 md:px-8 mx-auto">
  <h2 class="text-gray-800 text-2xl lg:text-3xl font-bold text-center mb-4 md:mb-8">スマイル診断</h2>
  <h3 class="text-gray-800 text-1xl lg:text-1xl font-bold text-center mb-4 md:mb-8">写真は、保存しないので安心して投稿できます。</h3>

  <div class="max-w-lg border rounded-lg mx-auto">
    <h4 class="text-gray-800 text-1xl lg:text-1xl font-bold text-center my-4 md:mb-8 mx-2">
      Webカメラで撮影もしくは、添付写真で診断するかを<br>
      選択してください。
    </h4>
    <div class="flex justify-center my-5">
      <button id="show-camera", class="bg-red-500 hover:bg-red-700 text-white rounded-full py-1 md:py-2 px-4 md:px-6 font-bold text-base md:text-lg mr-4">Webカメラ撮影</button>
      <button id="show-form", class="bg-yellow-500 hover:bg-yellow-700 text-white rounded-full py-1 md:py-2 px-4 md:px-6 font-bold text-base md:text-lg">添付写真</button>
    </div>
    <div id="error-message-area"></div>
    <div id="camera-section" style="display:none;">
      <div class="flex flex-col gap-4 p-5">
        <div class="flex items-center justify-center mb-2 border border-black-500 p-2 rounded">
          <video id="webcam" autoplay></video>
        </div>
        <div class="flex justify-center">
          <a class="px-6 py-2 bg-red-500 text-white rounded-full hover:bg-red-700 transition duration-200">
            <button id="capture" type="button" class="m-0">撮影</button>
          </a>
        </div>
        <canvas id="canvas" width="640" height="480" style="display:none;"></canvas>
      </div>
    </div>

    <div id="form-section" style="display:none;">
      <%= form_with url: smile_prices_path, method: :post, local: true do |f| %>
        <div class="flex flex-col gap-4 p-4 md:p-8">
          <div>
            <%= f.label :image, class: "inline-block text-gray-800 text-sm sm:text-base mb-2" %>
            <%= f.file_field :image, type: "file", onchange: 'previewImage()', class: "w-full bg-gray-50 text-gray-800 border focus:ring ring-indigo-300 rounded outline-none transition duration-100 px-3 py-2" %>
          </div>
          
          <div class="flex items-center justify-center mb-2 border border-black-500 p-2 rounded">
            <%= image_tag 'sample.jpeg', class: 'h-150 w-250 object-contain', id: 'preview' %>
          </div>
          
          <div class="flex justify-center">
            <a class="mt-4 px-6 py-2 bg-red-500 text-white rounded-full hover:bg-red-700 transition duration-200">
              <%= f.submit "送信" %>
            </a>
          </div>
      <% end %>
    </div>
  </div>
</div>
</div>

<script>
  const videoElement = document.getElementById('webcam');
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia({ video: true })
      .then(function (stream) {
        videoElement.srcObject = stream;
      })
      .catch(function (error) {
        console.error("Error accessing webcam: " + error);
      });
  } else {
    console.error("getUserMedia not supported");
  }

  window.addEventListener('load', function() {
    document.getElementById('show-camera').addEventListener('click', function() {
      document.getElementById('camera-section').style.display = 'block';
      document.getElementById('form-section').style.display = 'none';
    });

    document.getElementById('show-form').addEventListener('click', function() {
      document.getElementById('camera-section').style.display = 'none';
      document.getElementById('form-section').style.display = 'block';
    });
  });

  const captureButton = document.getElementById('capture');
  const canvasElement = document.getElementById('canvas');
  const ctx = canvasElement.getContext('2d');
  captureButton.addEventListener('click', () => {
    console.log('captureButton clicked');
    videoElement.pause();
    canvasElement.width = videoElement.videoWidth;
    canvasElement.height = videoElement.videoHeight;
    ctx.drawImage(videoElement, 0, 0, videoElement.videoWidth, videoElement.videoHeight);
    console.log("test");
    // 画像データを取得
    const imageData = canvasElement.toDataURL('image/png');
    // 画像データをBlob形式に変換
    const imageBlob = base64ToBlob(imageData);
    // 画像データを処理する
    sendImageDataToServer(imageBlob);
    console.log("test2");
  });

  function sendImageDataToServer(imageBlob) {
    const formData = new FormData();
    formData.append('image', imageBlob);
    console.log("test3");
    fetch('/smile_prices', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: formData
    })
    .then(response => {
      console.log('fetch called');
      if (!response.ok) {
        // If the response is not OK, throw an error.
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      // Otherwise, parse the JSON as usual.
      return response.json();
    })
    .catch((error) => {
      console.error('HTTP or JSON parse error:', error);
      // Check the error message and display a user-friendly message
      if(error.message.includes('422')) {
        displayErrorMessage('送信した情報に問題があります。再度確認してから送信してください。');
      } else {
        displayErrorMessage('エラーが発生しました。ページをリロードしてみてください。');
      }
      videoElement.play(); 
      return;
    })
    .then(data => {
      console.log('Success:', data);
      if (data.redirect_url) {
        console.log('Redirecting to', data.redirect_url);
        window.location.href = data.redirect_url;
        console.log('Should have redirected by now.');
      }
    })
    .catch((error) => {
      console.error('Error processing data:', error);
      // Check the error message and display a user-friendly message
      if (error && error.error) {
        displayErrorMessage('データの処理中にエラーが発生しました。ページをリロードしてみてください。');
      } else {
        // If the error is undefined, it's likely the 'redirect_url' property was not found
        displayErrorMessage('リダイレクト先の情報が見つかりません。ページをリロードしてみてください。');
      }
      videoElement.play(); 
    });
  };

  function clearErrorMessage() {
    const errorMessageContainer = document.getElementById('errorMessageContainer');
    while (errorMessageContainer.firstChild) {
      errorMessageContainer.removeChild(errorMessageContainer.firstChild);
    }
  };
  function displayErrorMessage(message) {
    clearErrorMessage(); 
    const errorMessageContainer = document.createElement('div');
    errorMessageContainer.classList.add('alert', 'alert-warning', 'shadow-lg', 'items-center', 'mb-2');

    const errorMessageDiv = document.createElement('div');
    const errorMessageSpan = document.createElement('span');
    errorMessageSpan.textContent = message;

    errorMessageDiv.appendChild(errorMessageSpan);
    errorMessageContainer.appendChild(errorMessageDiv);

    const errorMessageArea = document.getElementById('error-message-area'); // ここを修正
    errorMessageArea.appendChild(errorMessageContainer);
  };

  function base64ToBlob(base64Data) {
  const binaryData = atob(base64Data.split(',')[1]);
  const arrayBuffer = new ArrayBuffer(binaryData.length);
  const byteArray = new Uint8Array(arrayBuffer);

  for (let i = 0; i < binaryData.length; i++) {
    byteArray[i] = binaryData.charCodeAt(i);
  }

  const blob = new Blob([arrayBuffer], { type: 'image/png' });
  return blob;
  };
</script>

<script>
  function previewImage() {
      console.log(1111);
      const target = this.event.target;
      const file = target.files[0];
      const reader  = new FileReader();
      reader.onloadend = function () {
          const preview = document.querySelector("#preview")
          if(preview) {
              preview.src = reader.result;
          }
      }
      if (file) {
          reader.readAsDataURL(file);
      }
  }
</script>
